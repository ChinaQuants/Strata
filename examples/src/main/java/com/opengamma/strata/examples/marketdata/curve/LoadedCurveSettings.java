/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.examples.marketdata.curve;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.date.DayCount;
import com.opengamma.strata.basics.interpolator.CurveExtrapolator;
import com.opengamma.strata.basics.interpolator.CurveInterpolator;
import com.opengamma.strata.market.value.ValueType;

/**
 * Represents curve settings, used when loading curves.
 * <p>
 * This contains settings that apply across all instances of a particular curve.
 */
@BeanDefinition
final class LoadedCurveSettings
    implements ImmutableBean {

  /**
   * The day count convention.
   */
  @PropertyDefinition(validate = "notNull")
  private final DayCount dayCount;
  /**
   * The y-value type.
   */
  @PropertyDefinition(validate = "notNull")
  private final ValueType yValueType;
  /**
   * The interpolator.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurveInterpolator interpolator;
  /**
   * The left extrapolator.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurveExtrapolator leftExtrapolator;
  /**
   * The right extrapolator.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurveExtrapolator rightExtrapolator;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code LoadedCurveSettings}.
   * @return the meta-bean, not null
   */
  public static LoadedCurveSettings.Meta meta() {
    return LoadedCurveSettings.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(LoadedCurveSettings.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static LoadedCurveSettings.Builder builder() {
    return new LoadedCurveSettings.Builder();
  }

  private LoadedCurveSettings(
      DayCount dayCount,
      ValueType yValueType,
      CurveInterpolator interpolator,
      CurveExtrapolator leftExtrapolator,
      CurveExtrapolator rightExtrapolator) {
    JodaBeanUtils.notNull(dayCount, "dayCount");
    JodaBeanUtils.notNull(yValueType, "yValueType");
    JodaBeanUtils.notNull(interpolator, "interpolator");
    JodaBeanUtils.notNull(leftExtrapolator, "leftExtrapolator");
    JodaBeanUtils.notNull(rightExtrapolator, "rightExtrapolator");
    this.dayCount = dayCount;
    this.yValueType = yValueType;
    this.interpolator = interpolator;
    this.leftExtrapolator = leftExtrapolator;
    this.rightExtrapolator = rightExtrapolator;
  }

  @Override
  public LoadedCurveSettings.Meta metaBean() {
    return LoadedCurveSettings.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the day count convention.
   * @return the value of the property, not null
   */
  public DayCount getDayCount() {
    return dayCount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the y-value type.
   * @return the value of the property, not null
   */
  public ValueType getYValueType() {
    return yValueType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the interpolator.
   * @return the value of the property, not null
   */
  public CurveInterpolator getInterpolator() {
    return interpolator;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the left extrapolator.
   * @return the value of the property, not null
   */
  public CurveExtrapolator getLeftExtrapolator() {
    return leftExtrapolator;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the right extrapolator.
   * @return the value of the property, not null
   */
  public CurveExtrapolator getRightExtrapolator() {
    return rightExtrapolator;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      LoadedCurveSettings other = (LoadedCurveSettings) obj;
      return JodaBeanUtils.equal(getDayCount(), other.getDayCount()) &&
          JodaBeanUtils.equal(getYValueType(), other.getYValueType()) &&
          JodaBeanUtils.equal(getInterpolator(), other.getInterpolator()) &&
          JodaBeanUtils.equal(getLeftExtrapolator(), other.getLeftExtrapolator()) &&
          JodaBeanUtils.equal(getRightExtrapolator(), other.getRightExtrapolator());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getDayCount());
    hash = hash * 31 + JodaBeanUtils.hashCode(getYValueType());
    hash = hash * 31 + JodaBeanUtils.hashCode(getInterpolator());
    hash = hash * 31 + JodaBeanUtils.hashCode(getLeftExtrapolator());
    hash = hash * 31 + JodaBeanUtils.hashCode(getRightExtrapolator());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("LoadedCurveSettings{");
    buf.append("dayCount").append('=').append(getDayCount()).append(',').append(' ');
    buf.append("yValueType").append('=').append(getYValueType()).append(',').append(' ');
    buf.append("interpolator").append('=').append(getInterpolator()).append(',').append(' ');
    buf.append("leftExtrapolator").append('=').append(getLeftExtrapolator()).append(',').append(' ');
    buf.append("rightExtrapolator").append('=').append(JodaBeanUtils.toString(getRightExtrapolator()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code LoadedCurveSettings}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code dayCount} property.
     */
    private final MetaProperty<DayCount> dayCount = DirectMetaProperty.ofImmutable(
        this, "dayCount", LoadedCurveSettings.class, DayCount.class);
    /**
     * The meta-property for the {@code yValueType} property.
     */
    private final MetaProperty<ValueType> yValueType = DirectMetaProperty.ofImmutable(
        this, "yValueType", LoadedCurveSettings.class, ValueType.class);
    /**
     * The meta-property for the {@code interpolator} property.
     */
    private final MetaProperty<CurveInterpolator> interpolator = DirectMetaProperty.ofImmutable(
        this, "interpolator", LoadedCurveSettings.class, CurveInterpolator.class);
    /**
     * The meta-property for the {@code leftExtrapolator} property.
     */
    private final MetaProperty<CurveExtrapolator> leftExtrapolator = DirectMetaProperty.ofImmutable(
        this, "leftExtrapolator", LoadedCurveSettings.class, CurveExtrapolator.class);
    /**
     * The meta-property for the {@code rightExtrapolator} property.
     */
    private final MetaProperty<CurveExtrapolator> rightExtrapolator = DirectMetaProperty.ofImmutable(
        this, "rightExtrapolator", LoadedCurveSettings.class, CurveExtrapolator.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "dayCount",
        "yValueType",
        "interpolator",
        "leftExtrapolator",
        "rightExtrapolator");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1905311443:  // dayCount
          return dayCount;
        case -1065022510:  // yValueType
          return yValueType;
        case 2096253127:  // interpolator
          return interpolator;
        case -1992066886:  // leftExtrapolator
          return leftExtrapolator;
        case 1202004815:  // rightExtrapolator
          return rightExtrapolator;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public LoadedCurveSettings.Builder builder() {
      return new LoadedCurveSettings.Builder();
    }

    @Override
    public Class<? extends LoadedCurveSettings> beanType() {
      return LoadedCurveSettings.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code dayCount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DayCount> dayCount() {
      return dayCount;
    }

    /**
     * The meta-property for the {@code yValueType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ValueType> yValueType() {
      return yValueType;
    }

    /**
     * The meta-property for the {@code interpolator} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveInterpolator> interpolator() {
      return interpolator;
    }

    /**
     * The meta-property for the {@code leftExtrapolator} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveExtrapolator> leftExtrapolator() {
      return leftExtrapolator;
    }

    /**
     * The meta-property for the {@code rightExtrapolator} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveExtrapolator> rightExtrapolator() {
      return rightExtrapolator;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1905311443:  // dayCount
          return ((LoadedCurveSettings) bean).getDayCount();
        case -1065022510:  // yValueType
          return ((LoadedCurveSettings) bean).getYValueType();
        case 2096253127:  // interpolator
          return ((LoadedCurveSettings) bean).getInterpolator();
        case -1992066886:  // leftExtrapolator
          return ((LoadedCurveSettings) bean).getLeftExtrapolator();
        case 1202004815:  // rightExtrapolator
          return ((LoadedCurveSettings) bean).getRightExtrapolator();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code LoadedCurveSettings}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<LoadedCurveSettings> {

    private DayCount dayCount;
    private ValueType yValueType;
    private CurveInterpolator interpolator;
    private CurveExtrapolator leftExtrapolator;
    private CurveExtrapolator rightExtrapolator;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(LoadedCurveSettings beanToCopy) {
      this.dayCount = beanToCopy.getDayCount();
      this.yValueType = beanToCopy.getYValueType();
      this.interpolator = beanToCopy.getInterpolator();
      this.leftExtrapolator = beanToCopy.getLeftExtrapolator();
      this.rightExtrapolator = beanToCopy.getRightExtrapolator();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1905311443:  // dayCount
          return dayCount;
        case -1065022510:  // yValueType
          return yValueType;
        case 2096253127:  // interpolator
          return interpolator;
        case -1992066886:  // leftExtrapolator
          return leftExtrapolator;
        case 1202004815:  // rightExtrapolator
          return rightExtrapolator;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1905311443:  // dayCount
          this.dayCount = (DayCount) newValue;
          break;
        case -1065022510:  // yValueType
          this.yValueType = (ValueType) newValue;
          break;
        case 2096253127:  // interpolator
          this.interpolator = (CurveInterpolator) newValue;
          break;
        case -1992066886:  // leftExtrapolator
          this.leftExtrapolator = (CurveExtrapolator) newValue;
          break;
        case 1202004815:  // rightExtrapolator
          this.rightExtrapolator = (CurveExtrapolator) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public LoadedCurveSettings build() {
      return new LoadedCurveSettings(
          dayCount,
          yValueType,
          interpolator,
          leftExtrapolator,
          rightExtrapolator);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the day count convention.
     * @param dayCount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder dayCount(DayCount dayCount) {
      JodaBeanUtils.notNull(dayCount, "dayCount");
      this.dayCount = dayCount;
      return this;
    }

    /**
     * Sets the y-value type.
     * @param yValueType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder yValueType(ValueType yValueType) {
      JodaBeanUtils.notNull(yValueType, "yValueType");
      this.yValueType = yValueType;
      return this;
    }

    /**
     * Sets the interpolator.
     * @param interpolator  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder interpolator(CurveInterpolator interpolator) {
      JodaBeanUtils.notNull(interpolator, "interpolator");
      this.interpolator = interpolator;
      return this;
    }

    /**
     * Sets the left extrapolator.
     * @param leftExtrapolator  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder leftExtrapolator(CurveExtrapolator leftExtrapolator) {
      JodaBeanUtils.notNull(leftExtrapolator, "leftExtrapolator");
      this.leftExtrapolator = leftExtrapolator;
      return this;
    }

    /**
     * Sets the right extrapolator.
     * @param rightExtrapolator  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rightExtrapolator(CurveExtrapolator rightExtrapolator) {
      JodaBeanUtils.notNull(rightExtrapolator, "rightExtrapolator");
      this.rightExtrapolator = rightExtrapolator;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("LoadedCurveSettings.Builder{");
      buf.append("dayCount").append('=').append(JodaBeanUtils.toString(dayCount)).append(',').append(' ');
      buf.append("yValueType").append('=').append(JodaBeanUtils.toString(yValueType)).append(',').append(' ');
      buf.append("interpolator").append('=').append(JodaBeanUtils.toString(interpolator)).append(',').append(' ');
      buf.append("leftExtrapolator").append('=').append(JodaBeanUtils.toString(leftExtrapolator)).append(',').append(' ');
      buf.append("rightExtrapolator").append('=').append(JodaBeanUtils.toString(rightExtrapolator));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
