package com.opengamma.strata.pricer.rate;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.financial.legalentity.LegalEntity;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.currency.CurrencyPair;
import com.opengamma.strata.basics.index.FxIndex;
import com.opengamma.strata.basics.index.IborIndex;
import com.opengamma.strata.basics.index.OvernightIndex;
import com.opengamma.strata.basics.index.PriceIndex;
import com.opengamma.strata.basics.market.MarketDataKey;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.market.curve.Curve;
import com.opengamma.strata.market.value.DecoratedDiscountFactors;
import com.opengamma.strata.market.value.DiscountFactors;
import com.opengamma.strata.market.value.FxForwardRates;
import com.opengamma.strata.market.value.FxIndexRates;
import com.opengamma.strata.market.value.IborIndexRates;
import com.opengamma.strata.market.value.IssuerCurveProviders;
import com.opengamma.strata.market.value.OvernightIndexRates;
import com.opengamma.strata.market.value.PriceIndexValues;
import com.opengamma.strata.market.value.ZeroRateDiscountFactors;

@BeanDefinition(builderScope = "private")
public final class DecoratedRatesProviderSpreadPeriodic
    extends AbstractRatesProvider implements ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull")
  private final RatesProvider underlyingRatesProvider;

  @PropertyDefinition(validate = "notNull")
  private final Currency decoratedCurrency;

  @PropertyDefinition(validate = "notNull")
  private final LegalEntity decoratingIssuer;

  @PropertyDefinition
  private final double spread;

  @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero")
  private final double nPeriodsPerYear;

  @Override
  public LocalDate getValuationDate() {
    return underlyingRatesProvider.getValuationDate();
  }

  @Override
  public <T> T data(MarketDataKey<T> key) {
    return underlyingRatesProvider.data(key);
  }

  @Override
  public double fxRate(Currency baseCurrency, Currency counterCurrency) {
    return underlyingRatesProvider.fxRate(baseCurrency, counterCurrency);
  }

  @Override
  public DiscountFactors discountFactors(Currency currency) {
    if (currency.equals(decoratedCurrency)) {
      IssuerCurveProviders curves = underlyingRatesProvider.data(IssuerCurveProviders.class);
      Curve curve = curves.getIssuerCurves().get(decoratingIssuer);
      DiscountFactors baseDiscountFactor = ZeroRateDiscountFactors.of(currency, getValuationDate(), curve);
      return DecoratedDiscountFactors.of(baseDiscountFactor, nPeriodsPerYear, spread);
    }
    return underlyingRatesProvider.discountFactors(currency);
  }

  @Override
  public <T> T data(Class<T> type) {
    return underlyingRatesProvider.data(type);
  }

  @Override
  public FxIndexRates fxIndexRates(FxIndex index) {
    return underlyingRatesProvider.fxIndexRates(index);
  }

  @Override
  public FxForwardRates fxForwardRates(CurrencyPair currencyPair) {
    return underlyingRatesProvider.fxForwardRates(currencyPair);
  }

  @Override
  public IborIndexRates iborIndexRates(IborIndex index) {
    return underlyingRatesProvider.iborIndexRates(index);
  }

  @Override
  public OvernightIndexRates overnightIndexRates(OvernightIndex index) {
    return underlyingRatesProvider.overnightIndexRates(index);
  }

  @Override
  public PriceIndexValues priceIndexValues(PriceIndex index) {
    return underlyingRatesProvider.priceIndexValues(index);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DecoratedRatesProviderSpreadPeriodic}.
   * @return the meta-bean, not null
   */
  public static DecoratedRatesProviderSpreadPeriodic.Meta meta() {
    return DecoratedRatesProviderSpreadPeriodic.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DecoratedRatesProviderSpreadPeriodic.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private DecoratedRatesProviderSpreadPeriodic(
      RatesProvider underlyingRatesProvider,
      Currency decoratedCurrency,
      LegalEntity decoratingIssuer,
      double spread,
      double nPeriodsPerYear) {
    JodaBeanUtils.notNull(underlyingRatesProvider, "underlyingRatesProvider");
    JodaBeanUtils.notNull(decoratedCurrency, "decoratedCurrency");
    JodaBeanUtils.notNull(decoratingIssuer, "decoratingIssuer");
    ArgChecker.notNegativeOrZero(nPeriodsPerYear, "nPeriodsPerYear");
    this.underlyingRatesProvider = underlyingRatesProvider;
    this.decoratedCurrency = decoratedCurrency;
    this.decoratingIssuer = decoratingIssuer;
    this.spread = spread;
    this.nPeriodsPerYear = nPeriodsPerYear;
  }

  @Override
  public DecoratedRatesProviderSpreadPeriodic.Meta metaBean() {
    return DecoratedRatesProviderSpreadPeriodic.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlyingRatesProvider.
   * @return the value of the property, not null
   */
  public RatesProvider getUnderlyingRatesProvider() {
    return underlyingRatesProvider;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the decoratedCurrency.
   * @return the value of the property, not null
   */
  public Currency getDecoratedCurrency() {
    return decoratedCurrency;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the decoratingIssuer.
   * @return the value of the property, not null
   */
  public LegalEntity getDecoratingIssuer() {
    return decoratingIssuer;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the spread.
   * @return the value of the property
   */
  public double getSpread() {
    return spread;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the nPeriodsPerYear.
   * @return the value of the property
   */
  public double getNPeriodsPerYear() {
    return nPeriodsPerYear;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DecoratedRatesProviderSpreadPeriodic other = (DecoratedRatesProviderSpreadPeriodic) obj;
      return JodaBeanUtils.equal(getUnderlyingRatesProvider(), other.getUnderlyingRatesProvider()) &&
          JodaBeanUtils.equal(getDecoratedCurrency(), other.getDecoratedCurrency()) &&
          JodaBeanUtils.equal(getDecoratingIssuer(), other.getDecoratingIssuer()) &&
          JodaBeanUtils.equal(getSpread(), other.getSpread()) &&
          JodaBeanUtils.equal(getNPeriodsPerYear(), other.getNPeriodsPerYear());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getUnderlyingRatesProvider());
    hash = hash * 31 + JodaBeanUtils.hashCode(getDecoratedCurrency());
    hash = hash * 31 + JodaBeanUtils.hashCode(getDecoratingIssuer());
    hash = hash * 31 + JodaBeanUtils.hashCode(getSpread());
    hash = hash * 31 + JodaBeanUtils.hashCode(getNPeriodsPerYear());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("DecoratedRatesProviderSpreadPeriodic{");
    buf.append("underlyingRatesProvider").append('=').append(getUnderlyingRatesProvider()).append(',').append(' ');
    buf.append("decoratedCurrency").append('=').append(getDecoratedCurrency()).append(',').append(' ');
    buf.append("decoratingIssuer").append('=').append(getDecoratingIssuer()).append(',').append(' ');
    buf.append("spread").append('=').append(getSpread()).append(',').append(' ');
    buf.append("nPeriodsPerYear").append('=').append(JodaBeanUtils.toString(getNPeriodsPerYear()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DecoratedRatesProviderSpreadPeriodic}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code underlyingRatesProvider} property.
     */
    private final MetaProperty<RatesProvider> underlyingRatesProvider = DirectMetaProperty.ofImmutable(
        this, "underlyingRatesProvider", DecoratedRatesProviderSpreadPeriodic.class, RatesProvider.class);
    /**
     * The meta-property for the {@code decoratedCurrency} property.
     */
    private final MetaProperty<Currency> decoratedCurrency = DirectMetaProperty.ofImmutable(
        this, "decoratedCurrency", DecoratedRatesProviderSpreadPeriodic.class, Currency.class);
    /**
     * The meta-property for the {@code decoratingIssuer} property.
     */
    private final MetaProperty<LegalEntity> decoratingIssuer = DirectMetaProperty.ofImmutable(
        this, "decoratingIssuer", DecoratedRatesProviderSpreadPeriodic.class, LegalEntity.class);
    /**
     * The meta-property for the {@code spread} property.
     */
    private final MetaProperty<Double> spread = DirectMetaProperty.ofImmutable(
        this, "spread", DecoratedRatesProviderSpreadPeriodic.class, Double.TYPE);
    /**
     * The meta-property for the {@code nPeriodsPerYear} property.
     */
    private final MetaProperty<Double> nPeriodsPerYear = DirectMetaProperty.ofImmutable(
        this, "nPeriodsPerYear", DecoratedRatesProviderSpreadPeriodic.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "underlyingRatesProvider",
        "decoratedCurrency",
        "decoratingIssuer",
        "spread",
        "nPeriodsPerYear");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 912653895:  // underlyingRatesProvider
          return underlyingRatesProvider;
        case 974169128:  // decoratedCurrency
          return decoratedCurrency;
        case 465307619:  // decoratingIssuer
          return decoratingIssuer;
        case -895684237:  // spread
          return spread;
        case -2052575274:  // nPeriodsPerYear
          return nPeriodsPerYear;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DecoratedRatesProviderSpreadPeriodic> builder() {
      return new DecoratedRatesProviderSpreadPeriodic.Builder();
    }

    @Override
    public Class<? extends DecoratedRatesProviderSpreadPeriodic> beanType() {
      return DecoratedRatesProviderSpreadPeriodic.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code underlyingRatesProvider} property.
     * @return the meta-property, not null
     */
    public MetaProperty<RatesProvider> underlyingRatesProvider() {
      return underlyingRatesProvider;
    }

    /**
     * The meta-property for the {@code decoratedCurrency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Currency> decoratedCurrency() {
      return decoratedCurrency;
    }

    /**
     * The meta-property for the {@code decoratingIssuer} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LegalEntity> decoratingIssuer() {
      return decoratingIssuer;
    }

    /**
     * The meta-property for the {@code spread} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> spread() {
      return spread;
    }

    /**
     * The meta-property for the {@code nPeriodsPerYear} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> nPeriodsPerYear() {
      return nPeriodsPerYear;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 912653895:  // underlyingRatesProvider
          return ((DecoratedRatesProviderSpreadPeriodic) bean).getUnderlyingRatesProvider();
        case 974169128:  // decoratedCurrency
          return ((DecoratedRatesProviderSpreadPeriodic) bean).getDecoratedCurrency();
        case 465307619:  // decoratingIssuer
          return ((DecoratedRatesProviderSpreadPeriodic) bean).getDecoratingIssuer();
        case -895684237:  // spread
          return ((DecoratedRatesProviderSpreadPeriodic) bean).getSpread();
        case -2052575274:  // nPeriodsPerYear
          return ((DecoratedRatesProviderSpreadPeriodic) bean).getNPeriodsPerYear();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code DecoratedRatesProviderSpreadPeriodic}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<DecoratedRatesProviderSpreadPeriodic> {

    private RatesProvider underlyingRatesProvider;
    private Currency decoratedCurrency;
    private LegalEntity decoratingIssuer;
    private double spread;
    private double nPeriodsPerYear;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 912653895:  // underlyingRatesProvider
          return underlyingRatesProvider;
        case 974169128:  // decoratedCurrency
          return decoratedCurrency;
        case 465307619:  // decoratingIssuer
          return decoratingIssuer;
        case -895684237:  // spread
          return spread;
        case -2052575274:  // nPeriodsPerYear
          return nPeriodsPerYear;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 912653895:  // underlyingRatesProvider
          this.underlyingRatesProvider = (RatesProvider) newValue;
          break;
        case 974169128:  // decoratedCurrency
          this.decoratedCurrency = (Currency) newValue;
          break;
        case 465307619:  // decoratingIssuer
          this.decoratingIssuer = (LegalEntity) newValue;
          break;
        case -895684237:  // spread
          this.spread = (Double) newValue;
          break;
        case -2052575274:  // nPeriodsPerYear
          this.nPeriodsPerYear = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public DecoratedRatesProviderSpreadPeriodic build() {
      return new DecoratedRatesProviderSpreadPeriodic(
          underlyingRatesProvider,
          decoratedCurrency,
          decoratingIssuer,
          spread,
          nPeriodsPerYear);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("DecoratedRatesProviderSpreadPeriodic.Builder{");
      buf.append("underlyingRatesProvider").append('=').append(JodaBeanUtils.toString(underlyingRatesProvider)).append(',').append(' ');
      buf.append("decoratedCurrency").append('=').append(JodaBeanUtils.toString(decoratedCurrency)).append(',').append(' ');
      buf.append("decoratingIssuer").append('=').append(JodaBeanUtils.toString(decoratingIssuer)).append(',').append(' ');
      buf.append("spread").append('=').append(JodaBeanUtils.toString(spread)).append(',').append(' ');
      buf.append("nPeriodsPerYear").append('=').append(JodaBeanUtils.toString(nPeriodsPerYear));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
