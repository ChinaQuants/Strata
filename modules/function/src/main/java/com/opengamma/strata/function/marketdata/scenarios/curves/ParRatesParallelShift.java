/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.function.marketdata.scenarios.curves;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.jooq.lambda.Seq;

import com.opengamma.strata.basics.market.ObservableId;
import com.opengamma.strata.engine.marketdata.scenarios.Perturbation;
import com.opengamma.strata.market.curve.ParRates;
import com.opengamma.strata.market.curve.ShiftType;

/**
 * A perturbation that applies a parallel shift to a set of curve par rates.
 */
@BeanDefinition(builderScope = "private")
public final class ParRatesParallelShift implements Perturbation<ParRates>, ImmutableBean {

  /** The type of shift applied to the par rates. */
  @PropertyDefinition(validate = "notNull")
  private final ShiftType shiftType;

  /** The size of the shift applied to the par rates. */
  @PropertyDefinition(validate = "notNull")
  private final double shiftAmount;

  /**
   * Returns a perturbation that adds a fixed amount to each rate in a set of par rates.
   *
   * @param shiftAmount  the amount to add to each rate
   * @return a perturbation that adds a fixed amount to each rate in a set of par rates
   */
  public static ParRatesParallelShift absolute(double shiftAmount) {
    return new ParRatesParallelShift(ShiftType.ABSOLUTE, shiftAmount);
  }

  /**
   * Returns a perturbation that scales each rate in a set of par rates by the same factor.
   * TODO blurb about what the rate means
   *
   * @param shiftAmount  the amount to add to each rate
   * @return a perturbation that adds a fixed amount to each rate in a set of par rates
   */
  public static ParRatesParallelShift relative(double shiftAmount) {
    return new ParRatesParallelShift(ShiftType.RELATIVE, shiftAmount);
  }

  @Override
  public ParRates apply(ParRates parRates) {
    Map<ObservableId, Double> shiftedRates =
        Seq.seq(parRates.getRates()).toMap(tp -> tp.v1, tp -> shiftType.applyShift(tp.v2, shiftAmount));
    return ParRates.of(shiftedRates);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ParRatesParallelShift}.
   * @return the meta-bean, not null
   */
  public static ParRatesParallelShift.Meta meta() {
    return ParRatesParallelShift.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ParRatesParallelShift.Meta.INSTANCE);
  }

  private ParRatesParallelShift(
      ShiftType shiftType,
      double shiftAmount) {
    JodaBeanUtils.notNull(shiftType, "shiftType");
    JodaBeanUtils.notNull(shiftAmount, "shiftAmount");
    this.shiftType = shiftType;
    this.shiftAmount = shiftAmount;
  }

  @Override
  public ParRatesParallelShift.Meta metaBean() {
    return ParRatesParallelShift.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the type of shift applied to the par rates.
   * @return the value of the property, not null
   */
  public ShiftType getShiftType() {
    return shiftType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the size of the shift applied to the par rates.
   * @return the value of the property, not null
   */
  public double getShiftAmount() {
    return shiftAmount;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ParRatesParallelShift other = (ParRatesParallelShift) obj;
      return JodaBeanUtils.equal(getShiftType(), other.getShiftType()) &&
          JodaBeanUtils.equal(getShiftAmount(), other.getShiftAmount());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getShiftType());
    hash = hash * 31 + JodaBeanUtils.hashCode(getShiftAmount());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ParRatesParallelShift{");
    buf.append("shiftType").append('=').append(getShiftType()).append(',').append(' ');
    buf.append("shiftAmount").append('=').append(JodaBeanUtils.toString(getShiftAmount()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ParRatesParallelShift}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code shiftType} property.
     */
    private final MetaProperty<ShiftType> shiftType = DirectMetaProperty.ofImmutable(
        this, "shiftType", ParRatesParallelShift.class, ShiftType.class);
    /**
     * The meta-property for the {@code shiftAmount} property.
     */
    private final MetaProperty<Double> shiftAmount = DirectMetaProperty.ofImmutable(
        this, "shiftAmount", ParRatesParallelShift.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "shiftType",
        "shiftAmount");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return shiftType;
        case -1043480710:  // shiftAmount
          return shiftAmount;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ParRatesParallelShift> builder() {
      return new ParRatesParallelShift.Builder();
    }

    @Override
    public Class<? extends ParRatesParallelShift> beanType() {
      return ParRatesParallelShift.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code shiftType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ShiftType> shiftType() {
      return shiftType;
    }

    /**
     * The meta-property for the {@code shiftAmount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> shiftAmount() {
      return shiftAmount;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return ((ParRatesParallelShift) bean).getShiftType();
        case -1043480710:  // shiftAmount
          return ((ParRatesParallelShift) bean).getShiftAmount();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ParRatesParallelShift}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<ParRatesParallelShift> {

    private ShiftType shiftType;
    private double shiftAmount;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return shiftType;
        case -1043480710:  // shiftAmount
          return shiftAmount;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          this.shiftType = (ShiftType) newValue;
          break;
        case -1043480710:  // shiftAmount
          this.shiftAmount = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ParRatesParallelShift build() {
      return new ParRatesParallelShift(
          shiftType,
          shiftAmount);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ParRatesParallelShift.Builder{");
      buf.append("shiftType").append('=').append(JodaBeanUtils.toString(shiftType)).append(',').append(' ');
      buf.append("shiftAmount").append('=').append(JodaBeanUtils.toString(shiftAmount));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
