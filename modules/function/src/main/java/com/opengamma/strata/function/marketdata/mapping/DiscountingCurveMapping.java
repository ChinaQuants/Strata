/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.function.marketdata.mapping;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;
import com.opengamma.strata.basics.market.MarketDataId;
import com.opengamma.strata.engine.marketdata.mapping.MarketDataMapping;
import com.opengamma.strata.market.id.DiscountingCurveId;
import com.opengamma.strata.market.key.DiscountingCurveKey;

/**
 * Market data mapping that accepts a {@link DiscountingCurveKey} and returns a {@link DiscountingCurveId}
 * with the name of the curve group that is the source of the curve.
 */
@BeanDefinition
public final class DiscountingCurveMapping
    implements MarketDataMapping<YieldCurve, DiscountingCurveKey>, ImmutableBean {

  /** The name of the curve group from which discounting curves should be taken. */
  @PropertyDefinition(validate = "notEmpty")
  private final String curveGroupName;

  /**
   * Returns a mapper that accepts a {@link DiscountingCurveKey} and returns a {@link DiscountingCurveId}
   * with the name of the curve group that is the source of the curve.
   *
   * @param curveGroupName  the name of the curve group
   * @return a curve ID with the name of the curve group which is the source of the curve
   */
  public static DiscountingCurveMapping of(String curveGroupName) {
    return new DiscountingCurveMapping(curveGroupName);
  }

  @Override
  public Class<DiscountingCurveKey> getMarketDataKeyType() {
    return DiscountingCurveKey.class;
  }

  @Override
  public MarketDataId<YieldCurve> getIdForKey(DiscountingCurveKey key) {
    return DiscountingCurveId.of(key.getCurrency(), curveGroupName);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DiscountingCurveMapping}.
   * @return the meta-bean, not null
   */
  public static DiscountingCurveMapping.Meta meta() {
    return DiscountingCurveMapping.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DiscountingCurveMapping.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static DiscountingCurveMapping.Builder builder() {
    return new DiscountingCurveMapping.Builder();
  }

  private DiscountingCurveMapping(
      String curveGroupName) {
    JodaBeanUtils.notEmpty(curveGroupName, "curveGroupName");
    this.curveGroupName = curveGroupName;
  }

  @Override
  public DiscountingCurveMapping.Meta metaBean() {
    return DiscountingCurveMapping.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the curve group from which discounting curves should be taken.
   * @return the value of the property, not empty
   */
  public String getCurveGroupName() {
    return curveGroupName;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DiscountingCurveMapping other = (DiscountingCurveMapping) obj;
      return JodaBeanUtils.equal(getCurveGroupName(), other.getCurveGroupName());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurveGroupName());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("DiscountingCurveMapping{");
    buf.append("curveGroupName").append('=').append(JodaBeanUtils.toString(getCurveGroupName()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DiscountingCurveMapping}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveGroupName} property.
     */
    private final MetaProperty<String> curveGroupName = DirectMetaProperty.ofImmutable(
        this, "curveGroupName", DiscountingCurveMapping.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curveGroupName");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -382645893:  // curveGroupName
          return curveGroupName;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public DiscountingCurveMapping.Builder builder() {
      return new DiscountingCurveMapping.Builder();
    }

    @Override
    public Class<? extends DiscountingCurveMapping> beanType() {
      return DiscountingCurveMapping.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveGroupName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> curveGroupName() {
      return curveGroupName;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -382645893:  // curveGroupName
          return ((DiscountingCurveMapping) bean).getCurveGroupName();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code DiscountingCurveMapping}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<DiscountingCurveMapping> {

    private String curveGroupName;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(DiscountingCurveMapping beanToCopy) {
      this.curveGroupName = beanToCopy.getCurveGroupName();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -382645893:  // curveGroupName
          return curveGroupName;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -382645893:  // curveGroupName
          this.curveGroupName = (String) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public DiscountingCurveMapping build() {
      return new DiscountingCurveMapping(
          curveGroupName);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code curveGroupName} property in the builder.
     * @param curveGroupName  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder curveGroupName(String curveGroupName) {
      JodaBeanUtils.notEmpty(curveGroupName, "curveGroupName");
      this.curveGroupName = curveGroupName;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("DiscountingCurveMapping.Builder{");
      buf.append("curveGroupName").append('=').append(JodaBeanUtils.toString(curveGroupName));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
