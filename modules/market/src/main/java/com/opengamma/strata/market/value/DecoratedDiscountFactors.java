package com.opengamma.strata.market.value;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.date.DayCount;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.market.curve.CurveName;
import com.opengamma.strata.market.sensitivity.CurveCurrencyParameterSensitivities;
import com.opengamma.strata.market.sensitivity.CurveUnitParameterSensitivities;
import com.opengamma.strata.market.sensitivity.ZeroRateSensitivity;

@BeanDefinition(builderScope = "private")
public final class DecoratedDiscountFactors
    implements DiscountFactors, ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull")
  private final DiscountFactors underlyingDiscountFactors;

  @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero")
  private final double nPeriodsPerYear;

  @PropertyDefinition
  private final double spread;

  public static DecoratedDiscountFactors of(DiscountFactors underlyingDiscountFactors, double nPeriodsPerYear,
      double spread) {
    return new DecoratedDiscountFactors(underlyingDiscountFactors, nPeriodsPerYear, spread);
  }

  @Override
  public Currency getCurrency() {
    return underlyingDiscountFactors.getCurrency();
  }

  @Override
  public LocalDate getValuationDate() {
    return underlyingDiscountFactors.getValuationDate();
  }

  @Override
  public CurveName getCurveName() {
    return underlyingDiscountFactors.getCurveName();
  }

  @Override
  public int getParameterCount() {
    return underlyingDiscountFactors.getParameterCount();
  }

  @Override
  public DayCount getDayCount() {
    return underlyingDiscountFactors.getDayCount();
  }

  @Override
  public double discountFactor(LocalDate date) {
    double baseDf = underlyingDiscountFactors.discountFactor(date);
    double time = getDayCount().relativeYearFraction(getValuationDate(), date);
    if (Math.abs(time) < 1.0E-10) {
      return 1d;
    }
    double ratePeriodicAnnualPlusOne = Math.pow(baseDf, -1d / nPeriodsPerYear / time) + spread / nPeriodsPerYear;
    return Math.pow(ratePeriodicAnnualPlusOne, -nPeriodsPerYear * time);

  }

  @Override
  public ZeroRateSensitivity zeroRatePointSensitivity(LocalDate date, Currency sensitivityCurrency) {
    ZeroRateSensitivity baseSensi = underlyingDiscountFactors.zeroRatePointSensitivity(date, sensitivityCurrency);
    double baseDf = underlyingDiscountFactors.discountFactor(date);
    double df = discountFactor(date);
    double time = getDayCount().relativeYearFraction(getValuationDate(), date);
    double factor = Math.pow(df / baseDf, 1d + 1d / nPeriodsPerYear / time);
    return baseSensi.multipliedBy(factor);
  }

  @Override
  public CurveUnitParameterSensitivities unitParameterSensitivity(LocalDate date) {
    return underlyingDiscountFactors.unitParameterSensitivity(date);
  }

  @Override
  public CurveCurrencyParameterSensitivities curveParameterSensitivity(ZeroRateSensitivity pointSensitivity) {
    return underlyingDiscountFactors.curveParameterSensitivity(pointSensitivity);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DecoratedDiscountFactors}.
   * @return the meta-bean, not null
   */
  public static DecoratedDiscountFactors.Meta meta() {
    return DecoratedDiscountFactors.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DecoratedDiscountFactors.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private DecoratedDiscountFactors(
      DiscountFactors underlyingDiscountFactors,
      double nPeriodsPerYear,
      double spread) {
    JodaBeanUtils.notNull(underlyingDiscountFactors, "underlyingDiscountFactors");
    ArgChecker.notNegativeOrZero(nPeriodsPerYear, "nPeriodsPerYear");
    this.underlyingDiscountFactors = underlyingDiscountFactors;
    this.nPeriodsPerYear = nPeriodsPerYear;
    this.spread = spread;
  }

  @Override
  public DecoratedDiscountFactors.Meta metaBean() {
    return DecoratedDiscountFactors.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlyingDiscountFactors.
   * @return the value of the property, not null
   */
  public DiscountFactors getUnderlyingDiscountFactors() {
    return underlyingDiscountFactors;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the nPeriodsPerYear.
   * @return the value of the property
   */
  public double getNPeriodsPerYear() {
    return nPeriodsPerYear;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the spread.
   * @return the value of the property
   */
  public double getSpread() {
    return spread;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DecoratedDiscountFactors other = (DecoratedDiscountFactors) obj;
      return JodaBeanUtils.equal(getUnderlyingDiscountFactors(), other.getUnderlyingDiscountFactors()) &&
          JodaBeanUtils.equal(getNPeriodsPerYear(), other.getNPeriodsPerYear()) &&
          JodaBeanUtils.equal(getSpread(), other.getSpread());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getUnderlyingDiscountFactors());
    hash = hash * 31 + JodaBeanUtils.hashCode(getNPeriodsPerYear());
    hash = hash * 31 + JodaBeanUtils.hashCode(getSpread());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("DecoratedDiscountFactors{");
    buf.append("underlyingDiscountFactors").append('=').append(getUnderlyingDiscountFactors()).append(',').append(' ');
    buf.append("nPeriodsPerYear").append('=').append(getNPeriodsPerYear()).append(',').append(' ');
    buf.append("spread").append('=').append(JodaBeanUtils.toString(getSpread()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DecoratedDiscountFactors}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code underlyingDiscountFactors} property.
     */
    private final MetaProperty<DiscountFactors> underlyingDiscountFactors = DirectMetaProperty.ofImmutable(
        this, "underlyingDiscountFactors", DecoratedDiscountFactors.class, DiscountFactors.class);
    /**
     * The meta-property for the {@code nPeriodsPerYear} property.
     */
    private final MetaProperty<Double> nPeriodsPerYear = DirectMetaProperty.ofImmutable(
        this, "nPeriodsPerYear", DecoratedDiscountFactors.class, Double.TYPE);
    /**
     * The meta-property for the {@code spread} property.
     */
    private final MetaProperty<Double> spread = DirectMetaProperty.ofImmutable(
        this, "spread", DecoratedDiscountFactors.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "underlyingDiscountFactors",
        "nPeriodsPerYear",
        "spread");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 342704998:  // underlyingDiscountFactors
          return underlyingDiscountFactors;
        case -2052575274:  // nPeriodsPerYear
          return nPeriodsPerYear;
        case -895684237:  // spread
          return spread;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DecoratedDiscountFactors> builder() {
      return new DecoratedDiscountFactors.Builder();
    }

    @Override
    public Class<? extends DecoratedDiscountFactors> beanType() {
      return DecoratedDiscountFactors.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code underlyingDiscountFactors} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DiscountFactors> underlyingDiscountFactors() {
      return underlyingDiscountFactors;
    }

    /**
     * The meta-property for the {@code nPeriodsPerYear} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> nPeriodsPerYear() {
      return nPeriodsPerYear;
    }

    /**
     * The meta-property for the {@code spread} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> spread() {
      return spread;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 342704998:  // underlyingDiscountFactors
          return ((DecoratedDiscountFactors) bean).getUnderlyingDiscountFactors();
        case -2052575274:  // nPeriodsPerYear
          return ((DecoratedDiscountFactors) bean).getNPeriodsPerYear();
        case -895684237:  // spread
          return ((DecoratedDiscountFactors) bean).getSpread();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code DecoratedDiscountFactors}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<DecoratedDiscountFactors> {

    private DiscountFactors underlyingDiscountFactors;
    private double nPeriodsPerYear;
    private double spread;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 342704998:  // underlyingDiscountFactors
          return underlyingDiscountFactors;
        case -2052575274:  // nPeriodsPerYear
          return nPeriodsPerYear;
        case -895684237:  // spread
          return spread;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 342704998:  // underlyingDiscountFactors
          this.underlyingDiscountFactors = (DiscountFactors) newValue;
          break;
        case -2052575274:  // nPeriodsPerYear
          this.nPeriodsPerYear = (Double) newValue;
          break;
        case -895684237:  // spread
          this.spread = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public DecoratedDiscountFactors build() {
      return new DecoratedDiscountFactors(
          underlyingDiscountFactors,
          nPeriodsPerYear,
          spread);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("DecoratedDiscountFactors.Builder{");
      buf.append("underlyingDiscountFactors").append('=').append(JodaBeanUtils.toString(underlyingDiscountFactors)).append(',').append(' ');
      buf.append("nPeriodsPerYear").append('=').append(JodaBeanUtils.toString(nPeriodsPerYear)).append(',').append(' ');
      buf.append("spread").append('=').append(JodaBeanUtils.toString(spread));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
