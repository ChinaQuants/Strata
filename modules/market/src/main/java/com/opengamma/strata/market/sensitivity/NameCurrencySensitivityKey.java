/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.market.sensitivity;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.market.curve.CurveName;

/**
 * A key used for sensitivity to a curve in a specific currency, identified by the name.
 * <p>
 * This is a {@link SensitivityKey} implementation used by {@link CurveParameterSensitivity}.
 */
@BeanDefinition(builderScope = "private")
public final class NameCurrencySensitivityKey
    implements SensitivityKey, ImmutableBean {

  /**
   * The curve name that the sensitivity refers to.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurveName curveName;
  /**
   * The currency of the sensitivity.
   */
  @PropertyDefinition(validate = "notNull")
  private final Currency currency;

  //-------------------------------------------------------------------------
  /**
   * Obtains a key from the curve name and currency.
   * 
   * @param curveName  the curve name
   * @param currency  the currency of the sensitivity
   * @return the key
   */
  public static NameCurrencySensitivityKey of(String curveName, Currency currency) {
    return of(CurveName.of(curveName), currency);
  }

  /**
   * Obtains a key from the curve name and currency.
   * 
   * @param curveName  the curve name
   * @param currency  the currency of the sensitivity
   * @return the key
   */
  public static NameCurrencySensitivityKey of(CurveName curveName, Currency currency) {
    return new NameCurrencySensitivityKey(curveName, currency);
  }

  //-------------------------------------------------------------------------
  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("SensitivityKey{").append(getCurveName()).append(',').append(' ').append(getCurrency()).append('}');
    return buf.toString();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code NameCurrencySensitivityKey}.
   * @return the meta-bean, not null
   */
  public static NameCurrencySensitivityKey.Meta meta() {
    return NameCurrencySensitivityKey.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(NameCurrencySensitivityKey.Meta.INSTANCE);
  }

  private NameCurrencySensitivityKey(
      CurveName curveName,
      Currency currency) {
    JodaBeanUtils.notNull(curveName, "curveName");
    JodaBeanUtils.notNull(currency, "currency");
    this.curveName = curveName;
    this.currency = currency;
  }

  @Override
  public NameCurrencySensitivityKey.Meta metaBean() {
    return NameCurrencySensitivityKey.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve name that the sensitivity refers to.
   * @return the value of the property, not null
   */
  public CurveName getCurveName() {
    return curveName;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency of the sensitivity.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return currency;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      NameCurrencySensitivityKey other = (NameCurrencySensitivityKey) obj;
      return JodaBeanUtils.equal(getCurveName(), other.getCurveName()) &&
          JodaBeanUtils.equal(getCurrency(), other.getCurrency());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurveName());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurrency());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code NameCurrencySensitivityKey}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveName} property.
     */
    private final MetaProperty<CurveName> curveName = DirectMetaProperty.ofImmutable(
        this, "curveName", NameCurrencySensitivityKey.class, CurveName.class);
    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> currency = DirectMetaProperty.ofImmutable(
        this, "currency", NameCurrencySensitivityKey.class, Currency.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curveName",
        "currency");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return curveName;
        case 575402001:  // currency
          return currency;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends NameCurrencySensitivityKey> builder() {
      return new NameCurrencySensitivityKey.Builder();
    }

    @Override
    public Class<? extends NameCurrencySensitivityKey> beanType() {
      return NameCurrencySensitivityKey.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveName> curveName() {
      return curveName;
    }

    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Currency> currency() {
      return currency;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return ((NameCurrencySensitivityKey) bean).getCurveName();
        case 575402001:  // currency
          return ((NameCurrencySensitivityKey) bean).getCurrency();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code NameCurrencySensitivityKey}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<NameCurrencySensitivityKey> {

    private CurveName curveName;
    private Currency currency;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return curveName;
        case 575402001:  // currency
          return currency;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          this.curveName = (CurveName) newValue;
          break;
        case 575402001:  // currency
          this.currency = (Currency) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public NameCurrencySensitivityKey build() {
      return new NameCurrencySensitivityKey(
          curveName,
          currency);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("NameCurrencySensitivityKey.Builder{");
      buf.append("curveName").append('=').append(JodaBeanUtils.toString(curveName)).append(',').append(' ');
      buf.append("currency").append('=').append(JodaBeanUtils.toString(currency));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
