/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.calc.runner.function.result;

import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.stream.Stream;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.collect.ArgChecker;

/**
 * A scenario result holding one value that is valid for all scenarios.
 * <p>
 * This contains a single value where the same value is the result of each scenario.
 * The calculation runner will not attempt to convert the currency of the value.
 * 
 * @param <T>  the type of the result
 */
@BeanDefinition(builderScope = "private")
public final class SingleScenarioResult<T>
    implements ScenarioResult<T>, ImmutableBean, Serializable {

  /**
   * The number of scenarios.
   */
  @PropertyDefinition(validate = "notNull")
  private final int scenarioCount;
  /**
   * The single result that applies to all scenarios.
   */
  @PropertyDefinition(validate = "notNull")
  private final T result;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance from a single result and scenario count.
   * <p>
   * The single result is valid for each scenario.
   *
   * @param <T>  the type of the value
   * @param scenarioCount  the number of scenarios
   * @param result  the single value valid for all scenarios
   * @return an instance with the specified value and count
   */
  public static <T> SingleScenarioResult<T> of(int scenarioCount, T result) {
    return new SingleScenarioResult<>(scenarioCount, result);
  }

  //-------------------------------------------------------------------------
  @Override
  public int size() {
    return scenarioCount;
  }

  @Override
  public T get(int index) {
    ArgChecker.inRange(index, 0, scenarioCount, "index");
    return result;
  }

  @Override
  public Stream<T> stream() {
    return Collections.nCopies(scenarioCount, result).stream();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SingleScenarioResult}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static SingleScenarioResult.Meta meta() {
    return SingleScenarioResult.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code SingleScenarioResult}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> SingleScenarioResult.Meta<R> metaSingleScenarioResult(Class<R> cls) {
    return SingleScenarioResult.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SingleScenarioResult.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private SingleScenarioResult(
      int scenarioCount,
      T result) {
    JodaBeanUtils.notNull(scenarioCount, "scenarioCount");
    JodaBeanUtils.notNull(result, "result");
    this.scenarioCount = scenarioCount;
    this.result = result;
  }

  @SuppressWarnings("unchecked")
  @Override
  public SingleScenarioResult.Meta<T> metaBean() {
    return SingleScenarioResult.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the number of scenarios.
   * @return the value of the property, not null
   */
  public int getScenarioCount() {
    return scenarioCount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the single result that applies to all scenarios.
   * @return the value of the property, not null
   */
  public T getResult() {
    return result;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SingleScenarioResult<?> other = (SingleScenarioResult<?>) obj;
      return (scenarioCount == other.scenarioCount) &&
          JodaBeanUtils.equal(result, other.result);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(scenarioCount);
    hash = hash * 31 + JodaBeanUtils.hashCode(result);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("SingleScenarioResult{");
    buf.append("scenarioCount").append('=').append(scenarioCount).append(',').append(' ');
    buf.append("result").append('=').append(JodaBeanUtils.toString(result));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SingleScenarioResult}.
   * @param <T>  the type
   */
  public static final class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code scenarioCount} property.
     */
    private final MetaProperty<Integer> scenarioCount = DirectMetaProperty.ofImmutable(
        this, "scenarioCount", SingleScenarioResult.class, Integer.TYPE);
    /**
     * The meta-property for the {@code result} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<T> result = (DirectMetaProperty) DirectMetaProperty.ofImmutable(
        this, "result", SingleScenarioResult.class, Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "scenarioCount",
        "result");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1203198113:  // scenarioCount
          return scenarioCount;
        case -934426595:  // result
          return result;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends SingleScenarioResult<T>> builder() {
      return new SingleScenarioResult.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends SingleScenarioResult<T>> beanType() {
      return (Class) SingleScenarioResult.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code scenarioCount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> scenarioCount() {
      return scenarioCount;
    }

    /**
     * The meta-property for the {@code result} property.
     * @return the meta-property, not null
     */
    public MetaProperty<T> result() {
      return result;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1203198113:  // scenarioCount
          return ((SingleScenarioResult<?>) bean).getScenarioCount();
        case -934426595:  // result
          return ((SingleScenarioResult<?>) bean).getResult();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SingleScenarioResult}.
   * @param <T>  the type
   */
  private static final class Builder<T> extends DirectFieldsBeanBuilder<SingleScenarioResult<T>> {

    private int scenarioCount;
    private T result;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1203198113:  // scenarioCount
          return scenarioCount;
        case -934426595:  // result
          return result;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1203198113:  // scenarioCount
          this.scenarioCount = (Integer) newValue;
          break;
        case -934426595:  // result
          this.result = (T) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public SingleScenarioResult<T> build() {
      return new SingleScenarioResult<T>(
          scenarioCount,
          result);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("SingleScenarioResult.Builder{");
      buf.append("scenarioCount").append('=').append(JodaBeanUtils.toString(scenarioCount)).append(',').append(' ');
      buf.append("result").append('=').append(JodaBeanUtils.toString(result));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
